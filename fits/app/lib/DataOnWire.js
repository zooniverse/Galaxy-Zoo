// Generated by CoffeeScript 1.3.3
(function() {
  var DataOnWire,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DataOnWire = (function() {

    DataOnWire.prototype.validOrigins = ["http://www.galaxyzoo.org", "http://0.0.0.0:9294", "http://0.0.0.0:1024", "http://www.galaxyzoo.org.s3-website-us-east-1.amazonaws.com"];

    DataOnWire.prototype.hstDirs = {
      COS: 'COS_stamps_large',
      GDS: 'GDS_stamps_large',
      UDS: 'UDS_stamps_large'
    };

    function DataOnWire() {
      this.sendMessage = __bind(this.sendMessage, this);

      this.receiveMessage = __bind(this.receiveMessage, this);

      this.getHubblePath = __bind(this.getHubblePath, this);
      window.addEventListener("message", this.receiveMessage, false);
    }

    DataOnWire.prototype.getHubblePath = function(id) {
      var directory, match, pattern, prefix;
      pattern = /(COS|UDS|GDS)_\d+/;
      match = id.match(pattern);
      if (match == null) {
        return;
      }
      prefix = match[1];
      directory = "hst/" + this.hstDirs[prefix];
      return "" + directory + "/" + id;
    };

    DataOnWire.prototype.receiveMessage = function(e) {
      var band, bands, data, directory, id, survey, _i, _len, _ref, _results,
        _this = this;
      this.validOrigin = (_ref = e.origin, __indexOf.call(this.validOrigins, _ref) >= 0);
      if (!this.validOrigin) {
        return;
      }
      this.origin = e.origin;
      data = e.data;
      survey = data.survey;
      id = data.id;
      if (survey === 'sloan') {
        directory = "dr9zoo/" + id;
        bands = ['u', 'g', 'r', 'i', 'z'];
      } else {
        directory = this.getHubblePath(id);
        bands = ['h', 'i', 'j'];
      }
      console.log(directory, bands);
      _results = [];
      for (_i = 0, _len = bands.length; _i < _len; _i++) {
        band = bands[_i];
        _results.push((function(band, directory) {
          var url, xhr;
          url = "" + directory + "_" + band + ".fits.fz";
          console.log(url);
          xhr = new XMLHttpRequest();
          xhr.open('GET', url);
          xhr.responseType = 'arraybuffer';
          xhr.onreadystatechange = function(e) {
            var msg, ready, status, target;
            target = e.target;
            status = target.status;
            ready = target.readyState;
            if (ready === 4 && status === 200) {
              msg = {
                origin: url,
                band: band,
                arraybuffer: target.response
              };
              return _this.sendMessage(msg);
            }
          };
          return xhr.send();
        })(band, directory));
      }
      return _results;
    };

    DataOnWire.prototype.sendMessage = function(msg) {
      console.log("Attempting to post message to " + this.origin);
      return window.parent.postMessage(msg, this.origin);
    };

    return DataOnWire;

  })();

  this.DataOnWire = DataOnWire;

}).call(this);
